#-1
SELECT FIRST_NAME , LAST_NAME , EMAIL
FROM employees;

#-2---------------------------------------------------------------------------------

INSERT INTO departments (DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID)
VALUES (280, 'Training', 101, 1700);

#-3----------------------------------------------------------------------------------

UPDATE employees SET SALARY = 3000
WHERE EMPLOYEE_ID= 199;

#4-------------------------------------------------------------------------------------

&1451 - Cannot delete or update a parent row: a foreign key constraint fails (`hr`.`departments`, CONSTRAINT `DEPT_MGR_FK` 
FOREIGN KEY (`MANAGER_ID`) REFERENCES `employees` (`EMPLOYEE_ID`))
---
DELETE FROM JOBS
WHERE JOB_ID = 'PR_REP';

#5------------------------------------------------------------------------------------------

SELECT FIRST_NAME, LAST_NAME, HIRE_DATE
FROM EMPLOYEES
WHERE YEAR(HIRE_DATE) = 2005;

#6---------------------------------------------------------------------------------------

SELECT FIRST_NAME, LAST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY BETWEEN 10000 AND 15000
ORDER BY SALARY DESC;

#7--------------------------------------------------------------------------------------

SELECT FIRST_NAME, LAST_NAME, EMAIL
FROM EMPLOYEES
WHERE LAST_NAME LIKE '%son%';

#8----------------------------------------------------------------------------------------

SELECT FIRST_NAME, LAST_NAME, SALARY
FROM EMPLOYEES
ORDER BY SALARY DESC
LIMIT 5;

#9---------------------------------------------------------------------------------------

SELECT EMPLOYEES.FIRST_NAME, EMPLOYEES.LAST_NAME, DEPARTMENTS.DEPARTMENT_NAME
FROM EMPLOYEES
LEFT JOIN DEPARTMENTS
ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID;

#10----------------------------------------------------------------

SELECT DEPARTMENTS.DEPARTMENT_NAME, LOCATIONS.CITY
FROM DEPARTMENTS
JOIN LOCATIONS
ON DEPARTMENTS.LOCATION_ID = LOCATIONS.LOCATION_ID
WHERE LOCATIONS.CITY LIKE 'S%';

#11---------------------------------------------------------------------

SELECT DEPARTMENTS.DEPARTMENT_NAME, COUNT(EMPLOYEES.EMPLOYEE_ID) AS NUMBER_OF_EMPLOYEES
FROM DEPARTMENTS
LEFT JOIN EMPLOYEES
ON DEPARTMENTS.DEPARTMENT_ID = EMPLOYEES.DEPARTMENT_ID
GROUP BY DEPARTMENTS.DEPARTMENT_NAME;

$12--------------------------------------------------------------------

SELECT DEPARTMENTS.DEPARTMENT_NAME, AVG(EMPLOYEES.SALARY) AS AVERAGE_SALARY
FROM DEPARTMENTS
JOIN EMPLOYEES
ON DEPARTMENTS.DEPARTMENT_ID = EMPLOYEES.DEPARTMENT_ID
GROUP BY DEPARTMENTS.DEPARTMENT_NAME
HAVING AVG(EMPLOYEES.SALARY) > 8000;

#13---------------------------------------------------------------

SELECT EMPLOYEES.FIRST_NAME, EMPLOYEES.LAST_NAME, JOBS.JOB_TITLE
FROM EMPLOYEES
JOIN JOBS
ON EMPLOYEES.JOB_ID = JOBS.JOB_ID
WHERE JOBS.JOB_TITLE LIKE '%Manager%';

#14--------------------------------------------------------------------

SELECT REGIONS.REGION_NAME, SUM(EMPLOYEES.SALARY) AS TOTAL_SALARY
FROM EMPLOYEES
JOIN DEPARTMENTS
ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
JOIN LOCATIONS
ON DEPARTMENTS.LOCATION_ID = LOCATIONS.LOCATION_ID
JOIN REGIONS
ON LOCATIONS.REGION_ID = REGIONS.REGION_ID
GROUP BY REGIONS.REGION_NAME;

#15------------------------------------------------------------------------

SELECT EMPLOYEES.FIRST_NAME, EMPLOYEES.LAST_NAME, EMPLOYEES.SALARY, DEPARTMENTS.DEPARTMENT_NAME
FROM EMPLOYEES
JOIN DEPARTMENTS
ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
WHERE EMPLOYEES.SALARY > (
    SELECT AVG(SALARY)
    FROM EMPLOYEES
    WHERE DEPARTMENT_ID = EMPLOYEES.DEPARTMENT_ID
);

#16--------------------------------------------------------------------

CREATE VIEW EMPLOYEE_DETAILS AS
SELECT EMPLOYEES.FIRST_NAME, EMPLOYEES.LAST_NAME, EMPLOYEES.EMAIL, JOBS.JOB_TITLE, DEPARTMENTS.DEPARTMENT_NAME
FROM EMPLOYEES
JOIN JOBS
ON EMPLOYEES.JOB_ID = JOBS.JOB_ID
JOIN DEPARTMENTS
ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID;

SELECT * FROM EMPLOYEE_DETAILS;

#17--------------------------------------------------------------------------

SELECT EMPLOYEES.FIRST_NAME, EMPLOYEES.LAST_NAME, EMPLOYEES.HIRE_DATE
FROM EMPLOYEES
WHERE EMPLOYEES.HIRE_DATE > (
    SELECT MANAGER.HIRE_DATE
    FROM EMPLOYEES AS MANAGER
    WHERE MANAGER.EMPLOYEE_ID = EMPLOYEES.MANAGER_ID
);

#18--------------------------------------------------------------------------------

SELECT DEPARTMENTS.DEPARTMENT_NAME, DEPARTMENTS.LOCATION_ID
FROM DEPARTMENTS
LEFT JOIN EMPLOYEES
ON DEPARTMENTS.DEPARTMENT_ID = EMPLOYEES.DEPARTMENT_ID
WHERE EMPLOYEES.EMPLOYEE_ID IS NULL;

#19-----------------------------------------------------------------------------------

SELECT EMPLOYEES.FIRST_NAME, EMPLOYEES.LAST_NAME, COUNT(JOB_HISTORY.JOB_ID) AS JOB_CHANGES
FROM EMPLOYEES
JOIN JOB_HISTORY
ON EMPLOYEES.EMPLOYEE_ID = JOB_HISTORY.EMPLOYEE_ID
GROUP BY EMPLOYEES.FIRST_NAME, EMPLOYEES.LAST_NAME
HAVING COUNT(JOB_HISTORY.JOB_ID) >= 1;

#20---------------------------------------------------------------------------------------

SELECT COUNTRIES.COUNTRY_NAME, JOBS.JOB_TITLE, COUNT(EMPLOYEES.EMPLOYEE_ID) AS NUMBER_OF_EMPLOYEES
FROM EMPLOYEES
JOIN JOBS
ON EMPLOYEES.JOB_ID = JOBS.JOB_ID
JOIN DEPARTMENTS
ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
JOIN LOCATIONS
ON DEPARTMENTS.LOCATION_ID = LOCATIONS.LOCATION_ID
JOIN COUNTRIES
ON LOCATIONS.COUNTRY_ID = COUNTRIES.COUNTRY_ID
GROUP BY COUNTRIES.COUNTRY_NAME, JOBS.JOB_TITLE
HAVING COUNT(EMPLOYEES.EMPLOYEE_ID) > 5
ORDER BY COUNTRIES.COUNTRY_NAME, JOBS.JOB_TITLE;























